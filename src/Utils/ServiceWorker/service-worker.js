/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + './public/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.
// const CACHE_NAME = 'offline';
const CACHE_NAME = "version-1"
const OFFLINE_URL = './public/index.html';
const OFFLINE_CACHE = 'Offline_Cache'
const urlsToCache = [
  "/public/index.html",
  "/public/offline.html",
  "/",
  "/src/index.tsx",
  "/src/App.tsx",
  "/Styles/index.css",
  "/Styles/App.css",
  "/Assests/logo.svg",
  "/Assests/maskable_icon.png",
 
  "/src/Components/Home/About/index.tsx",
  "/src/Components/Home/Contact/index.tsx",
  "/src/Components/Home/Dashboard/index.tsx",
  "/src/Components/BottomBar/index.tsx",
  "/src/Components/TopNavbar/index.tsx",
  "/src/Components/Authentication/Profile/index.tsx",
  "/src/Components/Authentication/LogOut/index.tsx",
  "/src/Components/Authentication/LogInWithFirebase/index.tsx",
  "/src/Components/Authentication/SignUpWithFirebase/index.tsx",
  "/src/Components/Authentication/UpdateProfile/index.tsx",
]






self.addEventListener("activate", (event) => {
  const cacheWhiteList = []
  cacheWhiteList.push(CACHE_NAME)
  event.waitUntil(caches.keys().then((cacheNames) => Promise.all(
    cacheNames.map((cacheName) => {
      if(!cacheWhiteList.includes(cacheName)){
        return caches.delete(cacheName);
      }
    })
  )))
});


self.addEventListener("install", (event) => {
  event.waitUntil(
    caches
      .open(CACHE_NAME)
      .then((cache) => {
        console.log('Opened Cache')
        return cache.addAll(urlsToCache)
      }
      )
  );
});

self.addEventListener('fetch', (event) => {
  // We only want to call event.respondWith() if this is a GET request for an HTML document.
  if (event.request.method === 'GET' &&
      event.request.headers.get('accept').includes('text/javascript')) {
    console.log('Handling fetch event for', event.request.url);
    event.respondWith(
      fetch(event.request).catch((e) => {
        console.error('Fetch failed; returning offline page instead.', e);
        return caches.open(OFFLINE_CACHE).then((cache) => cache.match('./index.tsx'));
      })
    );
  }
});


// self.addEventListener("fetch", (event) => {
//   event.respondWith(
//     caches.match(event.request).then((response) => {
//       // caches.match() always resolves
//       // but in case of success response will have value
//       if (response !== undefined) {
//         return response;
//       } else {
//         return fetch(event.request)
//           .then((response) => {
//             // response may be used only once
//             // we need to save clone to put one copy in cache
//             // and serve second one
//             let responseClone = response.clone();

//             caches.open(CACHE_NAME).then((cache) => {
//               cache.put(event.request, responseClone);
//             });
//             return response;
//           })
//           .catch(() => caches.match("../public/index.html"));
//       }
//     })
//   );
// });