{"version":3,"file":"static/js/730.93caa1dc.chunk.js","mappings":"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","sources":["Components/Authentication/SignInWithGoogleFirebase/Fragments/Alert.tsx","Components/Authentication/SignInWithGoogleFirebase/index.tsx"],"sourcesContent":["import React from 'react';\nimport { Alert, AlertTitle, Box, Button, Collapse, IconButton } from '@mui/material';\nimport CloseIcon from '@mui/icons-material/Close';\n\nexport const SuccessAlert  = () => <Alert severity=\"success\">This is a success alert — You have successfully logged in!</Alert>;\n\nexport function ErrorAlert (props: { error: string  | boolean | null | undefined; }) {\n    return (\n        <Alert severity=\"error\">\n        <AlertTitle>Error</AlertTitle>\n        This is an error alert : {props.error}— <strong>check it out!</strong>\n      </Alert>\n    )\n} \nexport default function TransitionAlerts(props: any) {\n  const [open, setOpen] = React.useState(true);\n  const [status, setStatus] = React.useState('info');\n \n  React.useEffect(() => {\n    if (props.error){\n        setStatus('error');\n    } else if (props.success) {\n        setStatus('success')\n    } else if (props.loading){\n        setStatus('info')\n    }\n  }, [open])\n  return (\n    <Box sx={{ width: '100%' }}>\n      <Collapse in={open}>\n        <Alert\n        // @ts-ignore\n          severity={status}\n          action={\n            <IconButton\n              aria-label=\"close\"\n              color=\"inherit\"\n              size=\"small\"\n              onClick={() => {\n                setOpen(false);\n              }}\n            >\n              <CloseIcon fontSize=\"inherit\" />\n            </IconButton>\n          }\n          sx={{ mb: 2 }}\n        >\n          {status === 'success'?  'Successfully logged in!' : status === 'error' ? props.error : status === 'info' ? 'Loading information...' : null}\n        </Alert>\n      </Collapse>\n      <Button\n        disabled={open}\n        variant=\"outlined\"\n        onClick={() => {\n          setOpen(true);\n        }}\n      >\n        Check Status\n      </Button>\n    </Box>\n  );\n}","import React, { useState, FormEvent, ChangeEvent } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  googleSignInStart,\n  emailSignInStart,\n} from \"../../../Redux/Users/user.action\";\n\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport {\n  Alert,\n  Avatar,\n  Box,\n  Button,\n  Checkbox,\n  CircularProgress,\n  CssBaseline,\n  FormControlLabel,\n  Grid,\n  IconButton,\n  Link,\n  Paper,\n  TextField,\n  Tooltip,\n  Typography,\n} from \"@mui/material\";\nimport { useAuth } from \"../../../Utils/Auth\";\nimport { UserInfo } from \"firebase/auth\";\nimport { useNavigate } from \"react-router-dom\";\nimport TransitionAlerts, { ErrorAlert, SuccessAlert } from \"./Fragments/Alert\";\n\nconst defaultFormFields = {\n  email: \"\",\n  password: \"\",\n};\n\nconst theme = createTheme();\n\n\nexport default function SignInWithFirebase() {\n  const dispatch = useDispatch();\n  const [formFields, setFormFields] = useState(defaultFormFields);\n  const { email, password } = formFields;\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(false);\n  const navigate = useNavigate();\n  const [userLoggedInData, setUserLoggedInData] = React.useState<\n    null | any | UserInfo\n  >(null);\n  const resetFormFields = () => {\n    setFormFields(defaultFormFields);\n  };\n\n  const signInWithGoogle = async () => {\n    dispatch(googleSignInStart());\n  };\n\n  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    try {\n      setError(\"\");\n      setLoading(true);\n      dispatch(emailSignInStart(email, password));\n\n      if (!loggedInUser?.isAnonymous ){\n        setSuccess(true);\n        setTimeout(() => {\n          \n          navigate(\"/\");\n        }, 10000)\n        return ;\n      }\n      resetFormFields();\n    } catch (error) {\n      setError(\"Failed to Sign in\");\n      console.log(\"user sign in failed\", error);\n    }\n    setLoading(false);\n  };\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n    setFormFields({ ...formFields, [name]: value });\n  };\n  const handleGoogleSignIn = () => {\n    setLoading(true);\n    signInWithGoogle();\n  };\n\n  const loggedInUser: any = useAuth();\n\n   \n\n  React.useEffect(() => {\n    setUserLoggedInData(loggedInUser);\n  }, [loggedInUser]);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Grid container component=\"main\" sx={{ height: \"100vh\", width: \"100vh\" }}>\n        <CssBaseline />\n        <Grid\n          item\n          xs={false}\n          sm={4}\n          md={7}\n          sx={{\n            backgroundImage: \"url(https://source.unsplash.com/random)\",\n            backgroundRepeat: \"no-repeat\",\n            backgroundColor: (t) =>\n              t.palette.mode === \"light\"\n                ? t.palette.grey[50]\n                : t.palette.grey[900],\n            backgroundSize: \"cover\",\n            backgroundPosition: \"center\",\n          }}\n        />\n        <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n          <Box\n            sx={{\n              my: 8,\n              mx: 4,\n              display: \"flex\",\n              flexDirection: \"column\",\n              alignItems: \"center\",\n            }}\n          >\n              <Typography component={'h2'} variant='h5'> {success? <SuccessAlert /> : (error ? <ErrorAlert error={error} />:  <TransitionAlerts success={success} error={error} />)} </Typography>\n            <Tooltip\n              title={\n                userLoggedInData\n                  ? userLoggedInData?.displayName\n                  : userLoggedInData?.email\n              }\n            >\n              <IconButton sx={{ p: 0, margin: 2 }}>\n                <Avatar sx={{ m: 2, bgcolor: \"secondary.main\" }}>\n                  {userLoggedInData ? (\n                    <Avatar\n                      alt={userLoggedInData?.displayName}\n                      src={userLoggedInData?.photoURL}\n                      sizes={\"large\"}\n                    />\n                  ) : (\n                    <LockOutlinedIcon />\n                  )}\n                </Avatar>\n              </IconButton>\n            </Tooltip>\n    \n            <Typography component=\"h1\" variant=\"h5\">\n              Sign in\n            </Typography>\n            <Box\n              component=\"form\"\n              noValidate\n              onSubmit={handleSubmit}\n              sx={{ mt: 1 }}\n            >\n              {error && <Alert>{error}</Alert>}\n              <TextField\n                margin=\"normal\"\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Email Address\"\n                onChange={handleChange}\n                name=\"email\"\n                value={email}\n                autoComplete=\"email\"\n                autoFocus\n              />\n              <TextField\n                margin=\"normal\"\n                required\n                fullWidth\n                label=\"Password\"\n                onChange={handleChange}\n                name=\"password\"\n                value={password}\n                type=\"password\"\n                id=\"password\"\n                autoComplete=\"current-password\"\n              />\n              <FormControlLabel\n                control={<Checkbox value=\"remember\" color=\"primary\" />}\n                label=\"Remember me\"\n              />\n              <Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n                sx={{ mt: 3, mb: 2 }}\n              >\n                {loading ? <CircularProgress color=\"inherit\" /> : \"Sign In\"}\n              </Button>\n\n              <Button\n                fullWidth\n                variant=\"contained\"\n                sx={{ mt: 3, mb: 2 }}\n                type=\"button\"\n                onClick={handleGoogleSignIn}\n              >\n                <img\n                  width=\"40\"\n                  height=\"40\"\n                  src={\n                    \"https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Google_%22G%22_Logo.svg/2048px-Google_%22G%22_Logo.svg.png\"\n                  }\n                  alt=\"Google\"\n                />\n                {loading && !success? (\n                  <CircularProgress color=\"inherit\" />\n                ) : ( \" Sign In with Google\"\n                   )\n                }\n              </Button>\n              <Grid container>\n                <Grid item xs>\n                  <Link\n                    onClick={() => navigate(\"/authenticate/forgot-password\")}\n                    variant=\"body2\"\n                  >\n                    Forgot password?\n                  </Link>\n                </Grid>\n                <Grid item>\n                  <Link\n                    onClick={() => navigate(\"/authenticate/sign-up\")}\n                    variant=\"body2\"\n                  >\n                    {\"Don't have an account? Sign Up\"}\n                  </Link>\n                </Grid>\n              </Grid>\n            </Box>\n          </Box>\n        </Grid>\n      </Grid>\n    </ThemeProvider>\n  );\n}\n"],"names":["SuccessAlert","Alert","severity","ErrorAlert","props","AlertTitle","error","TransitionAlerts","React","open","setOpen","status","setStatus","success","loading","Box","sx","width","Collapse","in","action","IconButton","color","size","onClick","Close","fontSize","mb","Button","disabled","variant","defaultFormFields","email","password","theme","createTheme","SignInWithFirebase","dispatch","useDispatch","useState","formFields","setFormFields","setLoading","setError","setSuccess","navigate","useNavigate","userLoggedInData","setUserLoggedInData","signInWithGoogle","googleSignInStart","handleSubmit","event","preventDefault","emailSignInStart","loggedInUser","isAnonymous","setTimeout","console","log","handleChange","target","name","value","useAuth","ThemeProvider","Grid","container","component","height","CssBaseline","item","xs","sm","md","backgroundImage","backgroundRepeat","backgroundColor","t","palette","mode","grey","backgroundSize","backgroundPosition","Paper","elevation","square","my","mx","display","flexDirection","alignItems","Typography","Tooltip","title","displayName","p","margin","Avatar","m","bgcolor","alt","src","photoURL","sizes","LockOutlined","noValidate","onSubmit","mt","TextField","required","fullWidth","id","label","onChange","autoComplete","autoFocus","type","FormControlLabel","control","Checkbox","CircularProgress","Link"],"sourceRoot":""}